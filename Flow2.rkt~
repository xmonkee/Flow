#lang racket

(require slideshow)
(require racket/match)

(struct flow (canvas alts last-frame) #:mutable)

(define (pict->flow pct)
  (let ([canvas (max-box pct)]
        [alts (hash 'default pct)]
        [last-frame 'default])
    (flow canvas alts last-frame)))

(define (max-box pct1 [pct2 blank])
  (let ([w (max (pict->width pct1) (pict->width pct2))]
        [h (max (pict->height pct1) (pict->height pct2))])
    (ghost (rectangle w h))))

(define (flow+frame flw frame-name pct)
  (match (flw [(flow canvas alts last-frame)
               (flow 
                (max-box canvas pct) 
                (hash-set alts frame-name pct)
                last-frame)])))

(define (flow->pict flw [frame 'default])
  (hash-ref (flow-alts flw) frame (hash-ref flow-alts 'default))) 

(define (flow-join join-fn f1 f2)
  (let ([f1_ (if (flow? f1) f1 (pict->flow f1))]
        [f2_ (if (flow? f2) f2 (pict->flow f2))])
    (let ())))